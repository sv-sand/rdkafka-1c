
#Область ОписаниеПеременных

// Инстанс внешней компоненты 
Перем Компонента;

// Настройки Кафка
Перем Настройки;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Инициализирует компоненту, продюсера, консюмера
//
// Параметры:
//  Идентификатор	 - Строка	 - Идентификатор настройки Кафки из справочника НастройкаКафки
//
Процедура Инициализировать(Идентификатор) Экспорт
	
	Настройки = Справочники.НастройкиКафки.НайтиПоИдентификатору(Идентификатор);
	
	ИнициализироватьПродюсера();
	ИнициализироватьКонсюмера();
	
КонецПроцедуры

// Останавливает работу обработки, продюсера, консюмера. Обязательно необходимо вызывать этот метод.
//
Процедура Остановить() Экспорт
	
	ОстановитьПродюсера();
	ОстановитьКонсюмера();
	
	Компонента = Неопределено;
	
КонецПроцедуры

#Область Продюсер

// Отправляет сообщения в Кафку и проверяет подтверждение брокера о доставке сообщения.
// Медленный способ отправки.
//
// Параметры:
//  Данные		 - Строка	 - Текст сообщения, JSON
//  Ключ		 - Строка	 - Ключ сообщения
//  Заголовки	 - Строка	 - Заголовки сообщения в формате "Заголовок1: значение; Заголовок2: Значение"
//  Партиция	 - Число	 - Партиция, куда будет отправлено сообщение
//
Процедура ОтправитьСообщение(Данные, Ключ = "", Заголовки = "", Партиция = Неопределено) Экспорт

	Результат = Компонента.Отправить(Настройки.Топик, Данные, Ключ, Заголовки, Партиция);
	
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось отправить сообщение: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
КонецПроцедуры

// Отправляет сообщения в Кафку асинхронно. Быстрый способ отправки. Внимание, есть риск, что часть сообщений пакета 
//  может быть не принята брокером и придется отправлять весь пакет повторно.
//  Во время отправки пакета сообщений компонента автоматически в фоновом режиме передает сообщения брокеру Кафки порциями.
//  После отправки всех сообщений из пакета компонента проверяет наличие сообщений непринятых брокером,
//  если они есть будет вызвано исключение.
//
// Параметры:
//  МассивСообщений	 - Массив	 - Массив структур сообщений созданных методом НовоеСообщение()
//
Процедура ОтправитьСообщения(МассивСообщений) Экспорт

	Результат = Компонента.НачатьАсинхроннуюОтправку();	
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось отправить сообщения: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Для каждого Сообщение Из МассивСообщений Цикл
		Результат = Компонента.ОтправитьАсинхронно(Настройки.Топик, Сообщение.Данные, Сообщение.Ключ, Сообщение.Заголовки, Сообщение.Партиция);	
		Если НЕ Результат Тогда
			ТекстСообщения = СтрШаблон("Не удалось отправить сообщение: %1", Компонента.ОписаниеОшибки);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	
	КонецЦикла;	
	
	Результат = Компонента.Слить();	
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось отправить сообщения: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает новое сообщение для отправки асинхронно
//
// Параметры:
//  Данные		 - Строка	 - Текст сообщения, JSON
//  Ключ		 - Строка	 - Ключ сообщений
//  Заголовки	 - Строка	 - Заголовки сообщений в формате "Заголовок1: значение; Заголовок2: Значение"
//  Партиция	 - Число	 - Партиция, куда будут отправлены сообщения. Неопределено - значит Кафка выберет партицию автоматически.
// 
// Возвращаемое значение:
//  Структура - Структура сообщения с полями из параметров
//
Функция НовоеСообщение(Данные, Ключ = "", Заголовки = "", Партиция = Неопределено) Экспорт
	
	Сообщение = Новый Структура("Данные, Ключ, Заголовки, Партиция");
	Сообщение.Данные = Данные;
	Сообщение.Ключ = Ключ;
	Сообщение.Заголовки = Заголовки;
	Сообщение.Партиция = Партиция;
	
	Возврат Сообщение;
	
КонецФункции

// Возвращает очередь сообщений продюсера
// 
// Возвращаемое значение:
//  Число - Количество сообщений в очереди
//
Функция ОчередьСообщенийПродюсера() Экспорт	
	Возврат Компонента.ОчередьСообщенийПродюсера();		
КонецФункции

#КонецОбласти

#Область Консюмер

// Загружает следующее сообщение из Кафки
// 
// Возвращаемое значение:
//  Строка - Текст сообщения
//
Функция ПрочитатьСообщение() Экспорт
	
	Если Компонента.Прочитать() Тогда
		Возврат Компонента.ДанныеСообщения();	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Компонента.ОписаниеОшибки) Тогда
		ТекстСообщения = СтрШаблон("Не удалось прочитать новое сообщение: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает метаданные текущего прочитанного сообщения из Кафки
// 
// Возвращаемое значение:
//  Строка - Строка JSON с метаданными сообщения
//
Функция ПрочитатьМетаданныеСообщения() Экспорт

	Возврат Компонента.МетаданныеСообщения();
	
КонецФункции

// Возвращает очередь сообщений консюмера
// 
// Возвращаемое значение:
//  Число - Количество сообщений в очереди
//
Функция ОчередьСообщенийКонсюмера() Экспорт	
	Возврат Компонента.ОчередьСообщенийКонсюмера();		
КонецФункции

// Устанавливает оффсет в партицию топика
//
// Параметры:
//  Партиция - Число - Номер партиции
//  Оффсет - Число - Смещение
//
Процедура ЗафиксироватьОффсет(Партиция, Оффсет) Экспорт

	Результат = Компонента.ЗафиксироватьОффсет(Настройки.Топик, Партиция, Оффсет);
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось зафиксировать оффсет: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Запускает процесс логирования событий компоненты, при успешном выполнении в реквизит ЛогФайл будет установлен текущий файл с логами
//
// Параметры:
//  УровеньЛогирования	 - Строка	 - Уровень логирования, доступны вырианты: debug, info, warn, error, none
//  ЛогФайл				 - Строка	 - Имя файла на сервере для записи логов, по умолчанию будет назначено имя временного файла
// 
// Возвращаемое значение:
//  Строка - Имя файла логов на сервере
//
Функция НачатьЛогирование(УровеньЛогирования, ЛогФайл = "") Экспорт

	ДоступныеУровни = "none,debug,info,warn,error";
	ДоступныеУровниМассив = СтрРазделить(ДоступныеУровни, ",");
	Если ДоступныеУровниМассив.Найти(УровеньЛогирования) = Неопределено Тогда
		ТекстСообщения = СтрШаблон("Не верный уровень логирования '%1', доступные уровни: %2", УровеньЛогирования, ДоступныеУровни);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	Компонента.УровеньЛогирования = УровеньЛогирования;

	Если НЕ ЗначениеЗаполнено(ЛогФайл) Тогда
		ЛогФайл = ПолучитьИмяВременногоФайла("log");	
	КонецЕсли;	
	 
	Если НЕ Компонента.НачатьЛогирование(ЛогФайл) Тогда
		ТекстСообщения = СтрШаблон("Не удалось начать логирование: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат ЛогФайл;
	
КонецФункции

// Возвращает имя лог файла
// 
// Возвращаемое значение:
//  Строка - Имя лога файла
//
Функция ЛогФайл() Экспорт
	Возврат Компонента.ЛогФайл();	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодключитьКомпоненту()
		
	Макет = ПолучитьМакет("RdKafka1C");
	АдресКомпоненты = ПоместитьВоВременноеХранилище(Макет);
	
	Результат = ПодключитьВнешнююКомпоненту(АдресКомпоненты, "Kafka", 
		ТипВнешнейКомпоненты.Native, ТипПодключенияВнешнейКомпоненты.Изолированно);
		
	Если НЕ Результат Тогда
		ВызватьИсключение "Не удалось подключить внешнюю компоненту RdKafka1C";	
	КонецЕсли;
	
	Компонента = Новый ("AddIn.Kafka.RdKafka1C");	
	ВерсияКомпоненты = Компонента.ВерсияКомпоненты;
	ВерсияRdKafka = Компонента.ВерсияRdKafka;
	
КонецПроцедуры

Процедура УстановитьНастройкиБезопасности()

	Компонента.УстановитьПараметр("security.protocol", Настройки.Брокер.ПротоколБезопасности);
	
	Если Настройки.ПротоколБезопасности = "ssl"
		ИЛИ Настройки.ПротоколБезопасности = "sasl_ssl"
		Тогда
		Компонента.УстановитьПараметр("ssl.ca.location", ПодготовитьСертификат());
	КонецЕсли;
	
	Если Настройки.ПротоколБезопасности = "sasl_plaintext"
		ИЛИ Настройки.ПротоколБезопасности = "sasl_ssl"
		Тогда
		Компонента.УстановитьПараметр("sasl.mechanisms", Настройки.Брокер.МеханизмSASL);
		Компонента.УстановитьПараметр("sasl.username", Настройки.Брокер.ИмяПользователяSASL);
		Компонента.УстановитьПараметр("sasl.password", Настройки.Брокер.ПарольSASL);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьСертификат()
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pem");
	
	ЗаписьТекста = новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(Настройки.Брокер.СертификатSSL);
	ЗаписьТекста.Закрыть();
	
	Возврат ИмяФайла;
		
КонецФункции

Процедура ИнициализироватьПродюсера()
	
	Если НЕ Настройки.Отправка Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.ИнициализироватьПродюсера(Настройки.Брокер.СписокБрокеров);
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось инициализировать продюсера: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьКонсюмера()

	Если НЕ Настройки.Получение Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.ИнициализироватьКонсюмера(Настройки.Брокер.СписокБрокеров, Настройки.ГруппаКонсюмера);
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось инициализировать консюмера: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Подписки = Компонента.Подписки();
	Если СтрНайти(Подписки, Настройки.Топик) = 0 Тогда
		ПодписатьсяНаТопик();		
	КонецЕсли;
			
КонецПроцедуры

Процедура ОстановитьПродюсера()
	
	Если НЕ Настройки.Отправка Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.ОстановитьПродюсера();
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось остановить продюсера: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОстановитьКонсюмера()

	Если НЕ Настройки.Получение Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.ОстановитьКонсюмера();
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось остановить консюмера: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьсяНаТопик()

	Результат = Компонента.Подписаться(Настройки.Топик);
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось подписаться на топик %1, описание ошибки: %2", 
			Настройки.Топик, Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ПодключитьКомпоненту();

#КонецОбласти