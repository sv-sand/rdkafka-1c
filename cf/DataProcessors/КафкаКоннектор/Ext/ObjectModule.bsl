
#Область ОписаниеПеременных

// Инстанс внешней компоненты 
Перем Компонента;

// Настройки Кафка
Перем Настройка;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Инициализирует компоненту, продюсера, консюмера
//
// Параметры:
//  ИдентификаторНастройки	 - Строка, СправочникСсылка.НастройкиКафки	 - Идентификатор настройки Кафки из справочника НастройкаКафки,
//  	или ссылка на настройки. Внимание, если передана ссылка, активность настроек не проверяется.
//
Процедура Инициализировать(ИдентификаторНастройки) Экспорт
	
	Настройка = ПолучитьНастройку(ИдентификаторНастройки);
	
	ПодключитьКомпоненту();
	НачатьЛогирование(Настройка.УровеньЛогирования);
	ИнициализироватьПродюсера();
	ИнициализироватьКонсюмера();
	
КонецПроцедуры

// Останавливает работу обработки, продюсера, консюмера. Обязательно необходимо вызывать этот метод.
//
Процедура Остановить() Экспорт
	
	ОстановитьПродюсера();
	ОстановитьКонсюмера();
	
	Компонента = Неопределено;
	
КонецПроцедуры

#Область Продюсер

// Отправляет сообщения в Кафку и проверяет подтверждение брокера о доставке сообщения.
// Медленный способ отправки.
//
// Параметры:
//  Данные		 - Строка	 - Текст сообщения, JSON
//  Ключ		 - Строка	 - Ключ сообщения
//  Заголовки	 - Строка	 - Заголовки сообщения в формате "Заголовок1: значение; Заголовок2: Значение"
//  Партиция	 - Число	 - Партиция, куда будет отправлено сообщение
//
Процедура ОтправитьСообщение(Данные, Ключ = "", Заголовки = "", Партиция = Неопределено) Экспорт

	Результат = Компонента.Отправить(Настройка.Топик, Данные, Ключ, Заголовки, Партиция);
	
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось отправить сообщение: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
КонецПроцедуры

// Отправляет сообщения в Кафку асинхронно. Быстрый способ отправки. Внимание, есть риск, что часть сообщений пакета 
//  может быть не принята брокером и придется отправлять весь пакет повторно.
//  Во время отправки пакета сообщений компонента автоматически в фоновом режиме передает сообщения брокеру Кафки порциями.
//  После отправки всех сообщений из пакета компонента проверяет наличие сообщений непринятых брокером,
//  если они есть будет вызвано исключение.
//
// Параметры:
//  МассивСообщений	 - Массив	 - Массив структур сообщений созданных методом НовоеСообщение()
//
Процедура ОтправитьСообщения(МассивСообщений) Экспорт

	Результат = Компонента.НачатьАсинхроннуюОтправку();	
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось отправить сообщения: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Для каждого Сообщение Из МассивСообщений Цикл
		Результат = Компонента.ОтправитьАсинхронно(Настройка.Топик, Сообщение.Данные, Сообщение.Ключ, Сообщение.Заголовки, Сообщение.Партиция);	
		Если НЕ Результат Тогда
			ТекстСообщения = СтрШаблон("Не удалось отправить сообщение: %1", Компонента.ОписаниеОшибки);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	
	КонецЦикла;	
	
	Результат = Компонента.Слить();	
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось отправить сообщения: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает новое сообщение для отправки асинхронно
//
// Параметры:
//  Данные		 - Строка	 - Текст сообщения, JSON
//  Ключ		 - Строка	 - Ключ сообщений
//  Заголовки	 - Строка	 - Заголовки сообщений в формате "Заголовок1: значение; Заголовок2: Значение"
//  Партиция	 - Число	 - Партиция, куда будут отправлены сообщения. Неопределено - значит Кафка выберет партицию автоматически.
// 
// Возвращаемое значение:
//  Структура - Структура сообщения с полями из параметров
//
Функция НовоеСообщение(Данные, Ключ = "", Заголовки = "", Партиция = Неопределено) Экспорт
	
	Сообщение = Новый Структура("Данные, Ключ, Заголовки, Партиция");
	Сообщение.Данные = Данные;
	Сообщение.Ключ = Ключ;
	Сообщение.Заголовки = Заголовки;
	Сообщение.Партиция = Партиция;
	
	Возврат Сообщение;
	
КонецФункции

// Возвращает очередь сообщений продюсера
// 
// Возвращаемое значение:
//  Число - Количество сообщений в очереди
//
Функция ОчередьСообщенийПродюсера() Экспорт	
	Возврат Компонента.ОчередьСообщенийПродюсера();		
КонецФункции

#КонецОбласти

#Область Консюмер

// Загружает следующее сообщение из Кафки
// 
// Возвращаемое значение:
//  Строка - Текст сообщения
//
Функция ПрочитатьСообщение() Экспорт
	
	Если Компонента.Прочитать() Тогда
		Возврат Компонента.ДанныеСообщения();	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Компонента.ОписаниеОшибки) Тогда
		ТекстСообщения = СтрШаблон("Не удалось прочитать новое сообщение: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает метаданные текущего прочитанного сообщения из Кафки
// 
// Возвращаемое значение:
//  Строка - Строка JSON с метаданными сообщения
//
Функция ПрочитатьМетаданныеСообщения() Экспорт

	Возврат Компонента.МетаданныеСообщения();
	
КонецФункции

// Возвращает очередь сообщений консюмера
// 
// Возвращаемое значение:
//  Число - Количество сообщений в очереди
//
Функция ОчередьСообщенийКонсюмера() Экспорт	
	Возврат Компонента.ОчередьСообщенийКонсюмера();		
КонецФункции

// Подписывает консюмера на топик
//
Процедура Подписаться() Экспорт

	Результат = Компонента.Подписаться(Настройка.Топик);		
	Если Результат < 0 Тогда
		ТекстСообщения = СтрШаблон("Не удалось подписаться на топик: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список топиков на которые подписан консюмер
// 
// Возвращаемое значение:
//  Строка - Топики
//
Функция Подписки() Экспорт
	Возврат Компонента.Подписки();		
КонецФункции

// Устанавливает партицию для чтения сообщений
//
// Параметры:
//  Партиция - Число - Партиция
//
Процедура УстановитьПартицию(Партиция) Экспорт	
	
	Результат = Компонента.УстановитьПартицию(Настройка.Топик, Партиция);		
	Если Результат < 0 Тогда
		ТекстСообщения = СтрШаблон("Не удалось установить партицию: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает оффсет зафиксированный в топике
//
// Параметры:
//  Партиция - Число - Партиция
// 
// Возвращаемое значение:
//  Число - Оффсет
//
Функция ПолучитьОффсет(Партиция = 0) Экспорт	
	
	Результат = Компонента.ПолучитьОффсет(Настройка.Топик, Партиция);		
	Если Результат < 0 Тогда
		ТекстСообщения = СтрШаблон("Не удалось получить оффсет: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает оффсет в партицию топика
//
// Параметры:
//  Партиция - Число - Номер партиции
//  Оффсет - Число - Смещение
//
Процедура ЗафиксироватьОффсет(Партиция, Оффсет) Экспорт

	Результат = Компонента.ЗафиксироватьОффсет(Настройка.Топик, Партиция, Оффсет);
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось зафиксировать оффсет: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Запускает процесс логирования событий компоненты, при успешном выполнении вернет имя файла с логами
//
// Параметры:
//  УровеньЛогирования	 - Строка	 - Уровень логирования, доступны вырианты: debug, info, warn, error, none
// 
// Возвращаемое значение:
//  Строка - Имя файла логов на сервере
//
Функция НачатьЛогирование(УровеньЛогирования) Экспорт
	
	ДоступныеУровни = "debug,info,warn,error,none";
	ДоступныеУровниМассив = СтрРазделить(ДоступныеУровни, ",");
	
	Если ДоступныеУровниМассив.Найти(УровеньЛогирования) = Неопределено Тогда
		ТекстСообщения = СтрШаблон("Не верный уровень логирования '%1', доступные уровни: %2", УровеньЛогирования, ДоступныеУровни);
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	Каталог = Справочники.НастройкиКафки.КаталогЛогов(Настройка);
	СоздатьКаталог(Каталог);
	УдалитьУстаревшиеЛогФайлы(Каталог);
	
	Если УровеньЛогирования = "none" Тогда
		Возврат "";
	КонецЕсли;
	
	ЛогФайл = Каталог + СтрШаблон("%1_%2.%3", 
		Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd-HHmmss"), 
		Формат(НомерСеансаИнформационнойБазы(), "ЧГ="), 
		"log");	
	 
	// Доступные уровни логирования: none, debug, info, warn, error
	Компонента.УровеньЛогирования = УровеньЛогирования;
	
	Если НЕ Компонента.НачатьЛогирование(ЛогФайл) Тогда
		ТекстСообщения = СтрШаблон("Не удалось начать логирование: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат ЛогФайл;
	
КонецФункции

// Возвращает имя лог файла
// 
// Возвращаемое значение:
//  Строка - Имя лога файла
//
Функция ЛогФайл() Экспорт
	Возврат Компонента.ЛогФайл();	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНастройку(ИдентификаторНастройки)
	
	Если ТипЗнч(ИдентификаторНастройки) = Тип("СправочникСсылка.НастройкиКафки") Тогда
		Ссылка = ИдентификаторНастройки;
	Иначе
		Ссылка = Справочники.НастройкиКафки.НайтиПоИдентификатору(ИдентификаторНастройки);
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиКафки.Наименование КАК Наименование,
		|	НастройкиКафки.Идентификатор КАК Идентификатор,
		|	НастройкиКафки.Активна КАК Активна,
		|	НастройкиКафки.Отправка КАК Отправка,
		|	НастройкиКафки.Получение КАК Получение,
		|	НастройкиКафки.Брокер КАК Брокер,
		|	НастройкиКафки.Топик КАК Топик,
		|	НастройкиКафки.ГруппаКонсюмера КАК ГруппаКонсюмера,
		|	НастройкиКафки.УровеньЛогирования КАК УровеньЛогирования,
		|	НастройкиКафки.КоличествоХранимыхЛогФайлов КАК КоличествоХранимыхЛогФайлов,
		|	НастройкиКафки.Брокер.СписокБрокеров КАК СписокБрокеров,
		|	НастройкиКафки.Брокер.ПротоколБезопасности КАК ПротоколБезопасности,
		|	НастройкиКафки.Брокер.СертификатSSL КАК СертификатSSL,
		|	НастройкиКафки.Брокер.МеханизмSASL КАК МеханизмSASL,
		|	НастройкиКафки.Брокер.ИмяПользователяSASL КАК ИмяПользователяSASL,
		|	НастройкиКафки.Брокер.ПарольSASL КАК ПарольSASL
		|ИЗ
		|	Справочник.НастройкиКафки КАК НастройкиКафки
		|ГДЕ
		|	НастройкиКафки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение СтрШаблон("Не удалось получить настройки Кафки по идентификатору %1", ИдентификаторНастройки);	
	КонецЕсли;
	
	Настройка = ОбменДаннымиВМоделиСервиса.РезультатЗапросаВСтруктуру(РезультатЗапроса);
	
	Если НЕ Настройка.Активна Тогда
		ВызватьИсключение СтрШаблон("Настройка Кафки %1 не активна", Ссылка);
	КонецЕсли;
	
	Возврат Настройка;
	
КонецФункции

Процедура ПодключитьКомпоненту()
		
	Макет = ПолучитьОбщийМакет("RdKafka1C");
	АдресКомпоненты = ПоместитьВоВременноеХранилище(Макет);
	
	// +++ Отладка
	//АдресКомпоненты = "d:\work\RdKafka1C\build\Debug\RdKafka1C.dll";
	// --- Отладка
	
	Результат = ПодключитьВнешнююКомпоненту(АдресКомпоненты, "Kafka", 
		ТипВнешнейКомпоненты.Native, ТипПодключенияВнешнейКомпоненты.Изолированно);
		
	Если НЕ Результат Тогда
		ВызватьИсключение "Не удалось подключить внешнюю компоненту RdKafka1C";	
	КонецЕсли;
	
	Компонента = Новый ("AddIn.Kafka.RdKafka1C");	
	ВерсияКомпоненты = Компонента.ВерсияКомпоненты;
	ВерсияRdKafka = Компонента.ВерсияRdKafka;
	
КонецПроцедуры

Процедура УдалитьУстаревшиеЛогФайлы(Каталог)
	
	НайденныеФайлы = НайтиФайлы(Каталог, "*.log");
	Если НайденныеФайлы.Количество() < Настройка.КоличествоХранимыхЛогФайлов - 1 Тогда
		Возврат;	
	КонецЕсли;
	
	СписокФайлов = Новый СписокЗначений();
	Для каждого Файл Из НайденныеФайлы Цикл
		СписокФайлов.Добавить(Файл.ПолноеИмя);	
	КонецЦикла;
	
	СписокФайлов.СортироватьПоЗначению();
	
	ДопустимоеКоличествоФайлов = МАКС(0, Настройка.КоличествоХранимыхЛогФайлов - 1);
	Пока СписокФайлов.Количество() > ДопустимоеКоличествоФайлов Цикл
		Элемент = СписокФайлов.Получить(0);
		УдалитьФайлы(Элемент.Значение);		
		СписокФайлов.Удалить(Элемент);
	КонецЦикла;
		
КонецПроцедуры

Процедура ИнициализироватьПродюсера()
	
	Если НЕ Настройка.Отправка Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьКонфигурацию();
	
	Результат = Компонента.ИнициализироватьПродюсера(Настройка.Брокер.СписокБрокеров);
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось инициализировать продюсера: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьКонсюмера()

	Если НЕ Настройка.Получение Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьКонфигурацию();
	
	Результат = Компонента.ИнициализироватьКонсюмера(Настройка.Брокер.СписокБрокеров, Настройка.ГруппаКонсюмера);
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось инициализировать консюмера: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Результат = Компонента.Подписаться(Настройка.Топик);
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось подписаться на топик %1, описание ошибки: %2", 
			Настройка.Топик, Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
			
КонецПроцедуры

Процедура ОстановитьПродюсера()
	
	Если НЕ Настройка.Отправка Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.ОстановитьПродюсера();
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось остановить продюсера: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОстановитьКонсюмера()

	Если НЕ Настройка.Получение Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.ОстановитьКонсюмера();
	Если НЕ Результат Тогда
		ТекстСообщения = СтрШаблон("Не удалось остановить консюмера: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьКонфигурацию()

	// Полный список параметров конфигурации:
	// https://github.com/confluentinc/librdkafka/blob/master/CONFIGURATION.md
	
	ПротоколБезопасности = Настройка.Брокер.ПротоколБезопасности; 
	
	Компонента.УстановитьПараметр("security.protocol", ПротоколБезопасности);
	
	Если ПротоколБезопасности = "ssl" ИЛИ ПротоколБезопасности = "sasl_ssl" Тогда
		Компонента.УстановитьПараметр("ssl.ca.location", ПодготовитьСертификат());
	КонецЕсли;
	
	Если ПротоколБезопасности = "sasl_plaintext" ИЛИ ПротоколБезопасности = "sasl_ssl" Тогда
		Компонента.УстановитьПараметр("sasl.mechanisms", Настройка.Брокер.МеханизмSASL);
		Компонента.УстановитьПараметр("sasl.username", Настройка.Брокер.ИмяПользователяSASL);
		Компонента.УстановитьПараметр("sasl.password", Настройка.Брокер.ПарольSASL);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьСертификат()
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pem");
	
	ЗаписьТекста = новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(Настройка.Брокер.СертификатSSL);
	ЗаписьТекста.Закрыть();
	
	Возврат ИмяФайла;
		
КонецФункции

#КонецОбласти
