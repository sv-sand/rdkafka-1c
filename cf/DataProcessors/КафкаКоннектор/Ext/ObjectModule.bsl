
// Полный список параметров конфигурации libRdKafka:
// https://github.com/confluentinc/librdkafka/blob/master/CONFIGURATION.md

#Область ОписаниеПеременных

// Инстанс внешней компоненты 
Перем Компонента;

// Настройки Кафка
Перем Настройка;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Инициализирует компоненту, продюсера, консюмера
//
// Параметры:
//  ИдентификаторНастройки	 - Строка, СправочникСсылка.НастройкиКафки	 - Идентификатор настройки Кафки из справочника НастройкаКафки,
//  	или ссылка на настройки. Внимание, если передана ссылка, активность настроек не проверяется.
//
Процедура Инициализировать(ИдентификаторНастройки) Экспорт
	
	Настройка = ПолучитьНастройку(ИдентификаторНастройки);
	
	ПодключитьКомпоненту();
	НачатьЛогирование(Настройка.УровеньЛогирования);
	ИнициализироватьПродюсера();
	ИнициализироватьКонсюмера();
	
КонецПроцедуры

// Останавливает работу обработки, продюсера, консюмера. Обязательно необходимо вызывать этот метод.
//
Процедура Остановить() Экспорт
	
	ОстановитьПродюсера();
	ОстановитьКонсюмера();
	
	Компонента = Неопределено;
	
КонецПроцедуры

#Область Продюсер

// Возвращает новое сообщение для отправки
//
// Параметры:
//  Данные		 - Строка	 - Текст сообщения, JSON
//  Ключ		 - Строка	 - Ключ сообщений
//  Заголовки	 - Строка	 - Заголовки сообщений в формате "Заголовок1: значение; Заголовок2: Значение"
//  Партиция	 - Число	 - Партиция, куда будут отправлены сообщения. Неопределено - значит Кафка выберет партицию автоматически.
//  Идентификатор- Строка	 - Идентификатор сообщения. Если установить, по нему можно получить статус доставки методом 
// 
// Возвращаемое значение:
//  Структура - Структура сообщения с полями из параметров
//
Функция НовоеСообщение(Данные, Ключ = "", Заголовки = "", Партиция = Неопределено, Идентификатор = Неопределено) Экспорт
	
	Сообщение = Новый Структура("Данные, Ключ, Заголовки, Партиция, Идентификатор, Статус");
	Сообщение.Данные = Данные;
	Сообщение.Ключ = Ключ;
	Сообщение.Заголовки = Заголовки;
	Сообщение.Партиция = Партиция;
	Сообщение.Идентификатор = Идентификатор;
	Сообщение.Статус = "";
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		Сообщение.Идентификатор = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

// Отправляет сообщения в Кафку асинхронно.
//  Сообщения ставятся в очередь отправки, в это же время одновременно компонента отправляет сообщения в Кафку асинхронно порциями.
//  После постановки всех сообщений в очередь, 1С ожидает отправку оставшихся сообщений (метод Слить()) и проверяет статусы.
//
// Параметры:
//  МассивСообщений	 - Массив	 - Массив структур сообщений созданных методом НовоеСообщение()
//
Процедура ОтправитьСообщения(МассивСообщений) Экспорт

	Компонента.НачатьОтправку();
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось начать отправку сообщений: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Для каждого Сообщение Из МассивСообщений Цикл
		Компонента.Отправить(Настройка.Топик, Сообщение.Данные,
			Сообщение.Ключ, Сообщение.Заголовки, Сообщение.Партиция, Сообщение.Идентификатор);
			
		Если Компонента.Отказ Тогда
			ТекстСообщения = СтрШаблон("Не удалось поставить сообщение в очередь отправки: %1", Компонента.ОписаниеОшибки);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЦикла;
	
	Компонента.Слить();
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось отправить сообщения: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Для каждого Сообщение Из МассивСообщений Цикл
		Сообщение.Статус = Компонента.СтатусСообщения(Сообщение.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает статус доставки сообщения
//
// Параметры:
//  Идентификатор	 - Строка	 - Идентификатор сообщения
// 
// Возвращаемое значение:
//  Строка - Статус доставки сообщения. Может быть: PERSISTED, POSSIBLY_PERSISTED, NOT_PERSISTED, UNKNOWN
//
Функция СтатусДоставкиСообщения(Идентификатор) Экспорт
	Возврат Компонента.СтатусДоставкиСообщения(Идентификатор);
КонецФункции

// Возвращает очередь сообщений продюсера
// 
// Возвращаемое значение:
//  Число - Количество сообщений в очереди
//
Функция ОчередьСообщенийПродюсера() Экспорт
	Возврат Компонента.ОчередьСообщенийПродюсера();
КонецФункции

// Возвращает количество не доставленных сообщений продюсера
// 
// Возвращаемое значение:
//  Число - Количество недоставленных сообщений
//
Функция КоличествоНеДоставленныхCообщений() Экспорт
	Возврат Компонента.КоличествоНеДоставленныхCообщений();
КонецФункции

#КонецОбласти

#Область Консюмер

// Читает пакет сообщений из Кафки
//
// Параметры:
//  КоличествоСообщенийКЧтению	 - 	Число - Количество сообщений, которое требуется прочитать
// 
// Возвращаемое значение:
//  Массив - Массив структур, созданных методом НовоеСообщение()
//
Функция ПрочитатьСообщения(КоличествоСообщенийКЧтению) Экспорт
	
	МассивСообщений = Новый Массив;
	
	Пока МассивСообщений.Количество() < КоличествоСообщенийКЧтению Цикл
		Данные = ПрочитатьСообщение();
		Если Данные = Неопределено Тогда
			// Нет новых сообщений
			Прервать;
		КонецЕсли;
		
		МетаданныеJSON = ПрочитатьМетаданныеСообщения();
		МетаданныеСообщения = ЗначениеИзJSON(МетаданныеJSON);
		
		НовоеСообщение = НовоеСообщение(Данные, МетаданныеСообщения.key, МетаданныеСообщения.headers, МетаданныеСообщения.partition);
		НовоеСообщение.Статус = МетаданныеСообщения.status;
		
		МассивСообщений.Добавить(НовоеСообщение);
	КонецЦикла;
	
	Возврат МассивСообщений;
	
КонецФункции

// Загружает следующее сообщение из Кафки
// 
// Возвращаемое значение:
//  Строка - Текст сообщения
//
Функция ПрочитатьСообщение() Экспорт
	
	Результат = Компонента.Прочитать();
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось прочитать новое сообщение: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		// Нет новых сообщений
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСообщения = Компонента.ДанныеСообщения();
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось прочитать новое сообщение: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат ДанныеСообщения;
	
КонецФункции

// Возвращает метаданные текущего прочитанного сообщения из Кафки
// 
// Возвращаемое значение:
//  Строка - Строка JSON с метаданными сообщения
//
Функция ПрочитатьМетаданныеСообщения() Экспорт

	Мета = Компонента.МетаданныеСообщения();
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось прочитать метаданные сообщения: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат Мета;
	
КонецФункции

// Возвращает очередь сообщений консюмера
// 
// Возвращаемое значение:
//  Число - Количество сообщений в очереди
//
Функция ОчередьСообщенийКонсюмера() Экспорт	
	Возврат Компонента.ОчередьСообщенийКонсюмера();
КонецФункции

// Подписывает консюмера на топик
//
Процедура Подписаться() Экспорт

	Компонента.Подписаться(Настройка.Топик);
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось подписаться на топик: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список топиков на которые подписан консюмер
// 
// Возвращаемое значение:
//  Строка - Топики
//
Функция Подписки() Экспорт
	Возврат Компонента.Подписки();
КонецФункции

// Устанавливает партицию для чтения сообщений
//
// Параметры:
//  Партиция - Число - Партиция
//
Процедура УстановитьПартицию(Партиция) Экспорт
	
	Компонента.УстановитьПартицию(Настройка.Топик, Партиция);
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось установить партицию: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает оффсет зафиксированный в топике
//
// Параметры:
//  Партиция - Число - Партиция
// 
// Возвращаемое значение:
//  Число - Оффсет
//
Функция ПолучитьОффсет(Партиция = 0) Экспорт
	
	Оффсет = Компонента.ПолучитьОффсет(Настройка.Топик, Партиция);
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось получить оффсет: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат Оффсет;
	
КонецФункции

// Фиксирует оффсет по последним прочитанным сообщениям
//
Процедура ЗафиксироватьОффсет() Экспорт
	
	Если Настройка.АвтоКоммит Тогда
		ВызватьИсключение "Не удалось зафиксировать оффсет, в настройках установлен флаг ""Авто коммит""";
	КонецЕсли;
	
	Компонента.ЗафиксироватьОффсет();
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось зафиксировать оффсет: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает оффсет в партицию топика
//
// Параметры:
//  Партиция - Число - Номер партиции
//  Оффсет	 - Число - Смещение
//
Процедура ИзменитьОффсет(Партиция, Оффсет) Экспорт

	Если Настройка.АвтоКоммит Тогда
		ВызватьИсключение "Не удалось зафиксировать оффсет, в настройках установлен флаг ""Авто коммит""";
	КонецЕсли;
	
	Компонента.ЗафиксироватьОффсет(Настройка.Топик, Партиция, Оффсет);
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось изменить оффсет: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНастройку(ИдентификаторНастройки)
	
	Настройка = Новый Структура("Идентификатор, Отправка, Получение, Брокер, Топик, ГруппаКонсюмера, АвтоКоммит, УровеньЛогирования, КоличествоХранимыхЛогФайлов, 
		|СписокБрокеров, ПротоколБезопасности, СертификатSSL, МеханизмSASL, ИмяПользователяSASL, ПарольSASL");
	
	Если ТипЗнч(ИдентификаторНастройки) = Тип("СправочникСсылка.НастройкиКафки") Тогда
		Ссылка = ИдентификаторНастройки;
	Иначе
		Ссылка = Справочники.НастройкиКафки.НайтиПоИдентификатору(ИдентификаторНастройки);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиКафки.Активна КАК Активна,
		|	НастройкиКафки.Идентификатор КАК Идентификатор,
		|	НастройкиКафки.Отправка КАК Отправка,
		|	НастройкиКафки.Получение КАК Получение,
		|	НастройкиКафки.Брокер КАК Брокер,
		|	НастройкиКафки.Топик КАК Топик,
		|	НастройкиКафки.ГруппаКонсюмера КАК ГруппаКонсюмера,
		|	НастройкиКафки.АвтоКоммит КАК АвтоКоммит,
		|	НастройкиКафки.АвтоКоммит КАК АвтоКоммит,
		|	НастройкиКафки.УровеньЛогирования КАК УровеньЛогирования,
		|	НастройкиКафки.КоличествоХранимыхЛогФайлов КАК КоличествоХранимыхЛогФайлов,
		|	НастройкиКафки.Брокер.СписокБрокеров КАК СписокБрокеров,
		|	НастройкиКафки.Брокер.ПротоколБезопасности КАК ПротоколБезопасности,
		|	НастройкиКафки.Брокер.СертификатSSL КАК СертификатSSL,
		|	НастройкиКафки.Брокер.МеханизмSASL КАК МеханизмSASL,
		|	НастройкиКафки.Брокер.ИмяПользователяSASL КАК ИмяПользователяSASL,
		|	НастройкиКафки.Брокер.ПарольSASL КАК ПарольSASL
		|ИЗ
		|	Справочник.НастройкиКафки КАК НастройкиКафки
		|ГДЕ
		|	НастройкиКафки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение СтрШаблон("Не удалось получить настройки Кафки по идентификатору %1", ИдентификаторНастройки);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Если НЕ Выборка.Активна Тогда
		ВызватьИсключение СтрШаблон("Настройка Кафки %1 не активна", Ссылка);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Настройка, Выборка);
	
	Возврат Настройка;
	
КонецФункции

Процедура ПодключитьКомпоненту()
		
	Макет = ПолучитьМакет("RdKafka1C");
	АдресКомпоненты = ПоместитьВоВременноеХранилище(Макет);
	
	// +++ DEBUG
	//АдресКомпоненты = "/home/sand/work/rdkafka-1c/build/libRdKafka1C.so";
	//АдресКомпоненты = "d:\work\rdkafka-1c\build\Debug\RdKafka1C.dll";
	// --- DEBUG
	
	Результат = ПодключитьВнешнююКомпоненту(АдресКомпоненты, "Kafka", 
		ТипВнешнейКомпоненты.Native, ТипПодключенияВнешнейКомпоненты.Изолированно);
		
	Если НЕ Результат Тогда
		ВызватьИсключение "Не удалось подключить внешнюю компоненту RdKafka1C";
	КонецЕсли;
	
	Компонента = Новый ("AddIn.Kafka.RdKafka1C");	
	ВерсияКомпоненты = Компонента.ВерсияКомпоненты;
	ВерсияRdKafka = Компонента.ВерсияRdKafka;
	Локаль = Компонента.Локаль;
	
КонецПроцедуры

Процедура ИнициализироватьПродюсера()
	
	Если НЕ Настройка.Отправка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметр("bootstrap.servers", Настройка.Брокер.СписокБрокеров);	
	УстановитьПараметрыБезопасности();
	
	Компонента.ИнициализироватьПродюсера();
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось инициализировать продюсера: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьКонсюмера()

	Если НЕ Настройка.Получение Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметр("auto.offset.reset", "smallest");
	УстановитьПараметр("metadata.broker.list", Настройка.Брокер.СписокБрокеров);
	УстановитьПараметр("group.id", Настройка.ГруппаКонсюмера);
	
	Если Настройка.АвтоКоммит Тогда
		УстановитьПараметр("enable.auto.commit", "true");
	Иначе
		УстановитьПараметр("enable.auto.commit", "false");
	КонецЕсли;
	
	УстановитьПараметрыБезопасности();
	
	Компонента.ИнициализироватьКонсюмера();
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось инициализировать консюмера: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	// Подписывает консюмера на топик. При подписке мы получаем автоматическую балансировку нагрузки.
	// Может работать и без подсписки.
	Компонента.Подписаться(Настройка.Топик);
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось подписаться на топик %1, описание ошибки: %2", 
			Настройка.Топик, Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОстановитьПродюсера()
	
	Если НЕ Настройка.Отправка Тогда
		Возврат;
	КонецЕсли;
	
	Компонента.ОстановитьПродюсера();
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось остановить продюсера: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОстановитьКонсюмера()

	Если НЕ Настройка.Получение Тогда
		Возврат;
	КонецЕсли;
	
	Компонента.ОстановитьКонсюмера();
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось остановить консюмера: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

#Область НастройкиКомпоненты

Процедура УстановитьПараметр(Имя, Значение)
	
	Компонента.УстановитьПараметр(Имя, Значение);
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось установить параметр компоненты %1 в значение %2: %3", 
			Имя, Значение, Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыБезопасности()

	УстановитьПараметр("security.protocol", Настройка.ПротоколБезопасности);
	
	Если Настройка.ПротоколБезопасности = "ssl" ИЛИ Настройка.ПротоколБезопасности = "sasl_ssl" Тогда
		УстановитьПараметр("ssl.ca.location", ПодготовитьСертификат());
	КонецЕсли;
	
	Если Настройка.ПротоколБезопасности = "sasl_plaintext" ИЛИ Настройка.ПротоколБезопасности = "sasl_ssl" Тогда
		УстановитьПараметр("sasl.mechanisms", Настройка.МеханизмSASL);
		УстановитьПараметр("sasl.username", Настройка.ИмяПользователяSASL);
		УстановитьПараметр("sasl.password", Настройка.ПарольSASL);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьСертификат()
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pem");
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(Настройка.Брокер.СертификатSSL);
	ЗаписьТекста.Закрыть();
	
	Возврат ИмяФайла;
		
КонецФункции

#КонецОбласти

#Область Логирование

Функция НачатьЛогирование(УровеньЛогирования) Экспорт
	
	ДоступныеУровни = "debug,info,warn,error,none";
	ДоступныеУровниМассив = СтрРазделить(ДоступныеУровни, ",");
	
	Если ДоступныеУровниМассив.Найти(УровеньЛогирования) = Неопределено Тогда
		ТекстСообщения = СтрШаблон("Не верный уровень логирования '%1', доступные уровни: %2", УровеньЛогирования, ДоступныеУровни);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Каталог = Справочники.НастройкиКафки.КаталогЛогов(Настройка);
	СоздатьКаталог(Каталог);
	УдалитьУстаревшиеЛогФайлы(Каталог);
	
	Если УровеньЛогирования = "none" Тогда
		Возврат "";
	КонецЕсли;
	
	ЛогФайл = Каталог + СтрШаблон("%1_%2.%3", 
		Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd-HHmmss"), 
		Формат(НомерСеансаИнформационнойБазы(), "ЧГ="), 
		"log");
	 
	Компонента.НачатьЛогирование(ЛогФайл, УровеньЛогирования);
	Если Компонента.Отказ Тогда
		ТекстСообщения = СтрШаблон("Не удалось начать логирование: %1", Компонента.ОписаниеОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат ЛогФайл;
	
КонецФункции

Процедура УдалитьУстаревшиеЛогФайлы(Каталог)
	
	НайденныеФайлы = НайтиФайлы(Каталог, "*.log");
	Если НайденныеФайлы.Количество() < Настройка.КоличествоХранимыхЛогФайлов - 1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокФайлов = Новый СписокЗначений();
	Для каждого Файл Из НайденныеФайлы Цикл
		СписокФайлов.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	СписокФайлов.СортироватьПоЗначению();
	
	ДопустимоеКоличествоФайлов = МАКС(0, Настройка.КоличествоХранимыхЛогФайлов - 1);
	Пока СписокФайлов.Количество() > ДопустимоеКоличествоФайлов Цикл
		Элемент = СписокФайлов.Получить(0);
		УдалитьФайлы(Элемент.Значение);
		СписокФайлов.Удалить(Элемент);
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

Функция ЗначениеИзJSON(СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти
