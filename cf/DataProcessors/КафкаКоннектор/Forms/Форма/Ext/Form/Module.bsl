
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПартицияСообщенияПолучениеАвто = Истина;
	ОбновитьЭлементы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЭлементы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПартицияСообщенияПолучениеАвтоПриИзменении(Элемент)
	
	УстановитьПартициюПолучение();
	ОбновитьЭлементы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартицияСообщенияОтправкаАвтоПриИзменении(Элемент)
	ОбновитьЭлементы();
КонецПроцедуры

&НаКлиенте
Процедура ПартицияПолучениеПриИзменении(Элемент)
	УстановитьПартициюПолучение();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьКоннектор(Команда)
	СоздатьКоннекторНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьКоннекторНаСервере()

	Если НЕ ЗначениеЗаполнено(НастройкиКафки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресКоннектора)
		И ВосстановитьКоннектор() <> Неопределено
		Тогда
		ВызватьИсключение "Коннектор уже создан";
	КонецЕсли;
	
	Коннектор = Обработки.КафкаКоннектор.Создать();
	Коннектор.Инициализировать(НастройкиКафки.Идентификатор);
	
	Объект.ВерсияКомпоненты = Коннектор.ВерсияКомпоненты;
	Объект.ВерсияRdKafka = Коннектор.ВерсияRdKafka;
	Объект.Локаль = Коннектор.Локаль;
	
	СохранитьКоннектор(Коннектор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьКоннектор(Команда)
	ОстановитьКоннекторНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОстановитьКоннекторНаСервере()
	
	Коннектор = ВосстановитьКоннектор();
	Коннектор.Остановить();
	Коннектор = Неопределено;
	
	АдресКоннектора = "";
	
КонецПроцедуры

#Область Продюсер

&НаКлиенте
Процедура ОтправитьСообщения(Команда)
	ОтправитьСообщенияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщенияНаСервере()
	
	Коннектор = ВосстановитьКоннектор();
	
	ДобавлятьНомерСообщения = КоличествоСообщенийКОтправке > 1 И Лев(СокрЛП(ТекстСообщенияКОтправке), 1) <> "{";
	
	МассивСообщений = Новый Массив;
	Для НомерСообщения = 1 По КоличествоСообщенийКОтправке Цикл
		Текст = ТекстСообщенияКОтправке;
		Если ДобавлятьНомерСообщения Тогда
			Текст = Текст + " " + НомерСообщения;
		КонецЕсли;
		
		Если ПартицияСообщенияОтправкаАвто Тогда
			Сообщение = Коннектор.НовоеСообщение(Текст, КлючСообщения, ЗаголовкиСообщения);
		Иначе
			Сообщение = Коннектор.НовоеСообщение(Текст, КлючСообщения, ЗаголовкиСообщения, ПартицияСообщенияОтправка);
		КонецЕсли;
		
		МассивСообщений.Добавить(Сообщение);
	КонецЦикла;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Коннектор.ОтправитьСообщения(МассивСообщений);
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекстСообщения = СтрШаблон("Отправлено %1 сообщений за %2 секунд", 
	 	КоличествоСообщенийКОтправке,
		(ВремяОкончания - ВремяНачала) / 1000);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
	СохранитьКоннектор(Коннектор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьСообщенийПродюсера(Команда)
	ОчередьСообщенийПродюсераНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчередьСообщенийПродюсераНаСервере()
	
	Коннектор = ВосстановитьКоннектор();
	ОбщегоНазначения.СообщитьПользователю("Очередь сообщений продюсера: " + Коннектор.ОчередьСообщенийПродюсера());
	СохранитьКоннектор(Коннектор);
	
КонецПроцедуры

#КонецОбласти

#Область Консюмер

&НаКлиенте
Процедура ПрочитатьСообщения(Команда)
	ПрочитатьСообщениеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСообщениеНаСервере()
	
	Коннектор = ВосстановитьКоннектор();
	
	// Сначала вычитываем все сообщения для замера времени
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	МассивСообщений = Коннектор.ПрочитатьСообщения(КоличествоСообщенийКЧтению);
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекстСообщения = СтрШаблон("Загружено %1 сообщений за %2 секунд", 
		МассивСообщений.Количество(),
		(ВремяОкончания - ВремяНачала) / 1000);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
	// Теперь выводим сообщения, если количество больше 100 - это явно нагрузочный тест, нет смысла выводить их
	Если МассивСообщений.Количество() <= 100 Тогда
		Для каждого Сообщение Из МассивСообщений Цикл
			ТекстСообщения = "Сообщение: " + Сообщение.Данные;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Если ЧитатьМетаданныеСообщений Тогда
				Заголовки = "";
				Для каждого КлючИЗначение Из Сообщение.Заголовки Цикл
					Заголовки = Заголовки + Символы.ПС + КлючИЗначение.Ключ + ": " + КлючИЗначение.Значение;
				КонецЦикла;
				Заголовки = СокрЛП(Заголовки);
				
				ТекстСообщения = СтрШаблон("Метаданные сообщения: ключ=%1, заголовки=%2, партиция=%3, оффсет=%4",
					Сообщение.Ключ, Заголовки, Сообщение.Партиция, Сообщение.Оффсет);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		    
	СохранитьКоннектор(Коннектор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьОффсет(Команда)
	ЗафиксироватьОффсетНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьОффсетНаСервере()
	
	Коннектор = ВосстановитьКоннектор();
	Коннектор.ЗафиксироватьОффсет();
	СохранитьКоннектор(Коннектор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписки(Команда)
	ПодпискиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодпискиНаСервере()
	
	Коннектор = ВосстановитьКоннектор();
	ОбщегоНазначения.СообщитьПользователю(Коннектор.Подписки());
	СохранитьКоннектор(Коннектор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	ПодписатьсяНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодписатьсяНаСервере()
	
	Коннектор = ВосстановитьКоннектор();
	Коннектор.Подписаться();
	СохранитьКоннектор(Коннектор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОффсет(Команда)
	ПолучитьОффсетНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьОффсетНаСервере()
	
	Коннектор = ВосстановитьКоннектор();
	Оффсет = Коннектор.ПолучитьОффсет(ПартицияСообщенияОтправка);
	СохранитьКоннектор(Коннектор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОффсет(Команда)
	ИзменитьОффсетНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИзменитьОффсетНаСервере()
	
	Коннектор = ВосстановитьКоннектор();
	Коннектор.ИзменитьОффсет(ПартицияСообщенияОтправка, Оффсет);
	СохранитьКоннектор(Коннектор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьСообщенийКонсюмера(Команда)
	ОчередьСообщенийКонсюмераНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчередьСообщенийКонсюмераНаСервере()
	
	Коннектор = ВосстановитьКоннектор();
	ОбщегоНазначения.СообщитьПользователю("Очередь сообщений консюмера: " + Коннектор.ОчередьСообщенийКонсюмера());
	СохранитьКоннектор(Коннектор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьЭлементы()
	
	Элементы.ПартицияСообщенияОтправка.Доступность = НЕ ПартицияСообщенияОтправкаАвто;
	Элементы.ПартицияСообщенияПолучение.Доступность = НЕ ПартицияСообщенияПолучениеАвто;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКоннектор(Коннектор)
	
	Структура = Новый Структура("Коннектор", Коннектор);
	АдресКоннектора = ПоместитьВоВременноеХранилище(Структура, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьКоннектор()
	
	Если НЕ ЗначениеЗаполнено(АдресКоннектора) Тогда
		ВызватьИсключение "Коннектор не был создан";
	КонецЕсли;
	
	Структура = ПолучитьИзВременногоХранилища(АдресКоннектора);
	
	Если Структура = Неопределено Тогда
		ВызватьИсключение "Не удалось получить коннектор из временного хранилища";
	КонецЕсли;
	
	Возврат Структура.Коннектор;
	
КонецФункции

&НаСервере
Процедура УстановитьПартициюПолучение()
	
	Коннектор = ВосстановитьКоннектор();
	
	Если ПартицияСообщенияПолучениеАвто Тогда
		Коннектор.УстановитьПартицию(Неопределено);
	Иначе
		Коннектор.УстановитьПартицию(ПартицияСообщенияПолучение);
	КонецЕсли;
	
	СохранитьКоннектор(Коннектор);
	
КонецПроцедуры

#КонецОбласти
