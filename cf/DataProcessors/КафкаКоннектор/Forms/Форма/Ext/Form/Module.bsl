
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Объект.УровеньЛогирования = "info";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьКомпоненту(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура УровеньЛоговПриИзменении(Элемент)
	УровеньЛоговПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УровеньЛоговПриИзмененииНаСервере()
	
	Компонента = ВосстановитьКомпоненту();
	Компонента.УровеньЛогирования = Объект.УровеньЛогирования;
	
	СохранитьКомпоненту(Компонента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодключитьКомпоненту(Команда)
	
	Если НЕ ПодключитьКомпонентуНаСервере() Тогда
		ПоказатьПредупреждение(, "Не удалось подключить компоненту", , "Внимание!");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодключитьКомпонентуНаСервере()
	
	//Результат = ПодключитьВнешнююКомпоненту(Объект.ПутьККомпоненте, "Kafka", 
	Результат = ПодключитьВнешнююКомпоненту("ОбщийМакет.RdKafka1C", "Kafka", 
		ТипВнешнейКомпоненты.Native, ТипПодключенияВнешнейКомпоненты.Изолированно);
		
	Возврат Результат;	
		
КонецФункции

&НаКлиенте
Процедура Запустить(Команда)
	ЗапуститьНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьНаСервере()	
	
	Компонента = Новый ("AddIn.Kafka.RdKafka1C");	
	Компонента.ТаймаутОпераций = 1000;
	Объект.ВерсияКомпоненты = Компонента.ВерсияКомпоненты;
	Объект.ВерсияRdKafka = Компонента.ВерсияRdKafka;
		
	Если Объект.ВключитьЛогирование Тогда
		Компонента.УровеньЛогирования = Объект.УровеньЛогирования;
		Если НЕ Компонента.НачатьЛогирование(Объект.КаталогЛогов) Тогда
			СообщитьПользователю(Компонента.ОписаниеОшибки);
		КонецЕсли;
		Объект.ЛогФайл = Компонента.ЛогФайл;
	КонецЕсли;
			
	Результат = Компонента.ИнициализироватьПродюсера(Объект.Брокер, Объект.Топик);
	Если НЕ Результат Тогда
		СообщитьПользователю(Компонента.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.ИнициализироватьКонсюмера(Объект.Брокер, Объект.Топик, Объект.ГруппаКонсюмера);
	Если НЕ Результат Тогда
		СообщитьПользователю(Компонента.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	СохранитьКомпоненту(Компонента); 
		
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	ОстановитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОстановитьНаСервере()
	
	Компонента = ВосстановитьКомпоненту();
	
	Результат = Компонента.ОстановитьПродюсера();
	Если НЕ Результат Тогда
		СообщитьПользователю(Компонента.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Результат = Компонента.ОстановитьКонсюмера();
	Если НЕ Результат Тогда
		СообщитьПользователю(Компонента.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Компонента = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЛоги(Команда)
	ПрочитатьЛогиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЛогиНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.ЛогФайл) Тогда
		Логи.Очистить();
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(Объект.ЛогФайл);
	Если НЕ Файл.Существует() Тогда
		Логи.Очистить();
		Возврат;
	КонецЕсли;
	
	Логи.Прочитать(Объект.ЛогФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщения(Команда)
	ОтправитьСообщенияНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщенияНаСервере()
	
	Компонента = ВосстановитьКомпоненту();
	
	Для НомерСообщения = 1 По Объект.КоличествоСообщенийКОтправке Цикл
		//Результат = Компонента.Отправить(ТекстСообщения);
		Результат = Компонента.Отправить(ТекстСообщения + " " + НомерСообщения, 
			Объект.КлючСообщения, Объект.ЗаголовкиСообщения, Объект.ПартицияСообщения);
			
		Если НЕ Результат Тогда
			СообщитьПользователю(Компонента.ОписаниеОшибки);
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	СохранитьКомпоненту(Компонента);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСообщения(Команда)
	ПрочитатьСообщениеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСообщениеНаСервере()
	
	Компонента = ВосстановитьКомпоненту();
	
	Пока Компонента.Прочитать() Цикл		
		Текст = СтрШаблон(
			"Сообщение: '%1'
			|Метаданные: %2",
			Компонента.ДанныеСообщения(),
			Компонента.МетаданныеСообщения());
		СообщитьПользователю(Текст);		
	КонецЦикла;
	    
	Если ЗначениеЗаполнено(Компонента.ОписаниеОшибки) Тогда
		СообщитьПользователю(Компонента.ОписаниеОшибки);
	КонецЕсли;
	
	СохранитьКомпоненту(Компонента);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СообщитьПользователю(Текст)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКомпоненту(Компонента)

	Контейнер = Новый Структура("Компонента", Компонента);
	АдресКомпоненты = ПоместитьВоВременноеХранилище(Контейнер, УникальныйИдентификатор);	
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьКомпоненту()

	Контейнер = ПолучитьИзВременногоХранилища(АдресКомпоненты);
	Возврат Контейнер.Компонента;
	
КонецФункции

#КонецОбласти









